//@ sourceMappingURL=steve-ui.map
// Generated by CoffeeScript 1.6.1
(function() {
  "use strict";
  var deg, rad;

  rad = function(deg) {
    return deg / 180 * Math.PI;
  };

  deg = function(rad) {
    return rad * 180 / Math.PI;
  };

  steve.attachUI = function() {
    var draggedImageItem, hook, parts, ui, updateUI;
    delete steve.attachUI;
    updateUI = function() {
      var part;
      if (part = parts[ui.joints.value]) {
        ui.x.value = deg(part.rotation.x);
        ui.y.value = deg(part.rotation.y);
        ui.z.value = deg(part.rotation.z);
        return document.getElementById('pose_joint_controls').style.display = 'block';
      } else {
        ui.x.value = 0;
        ui.y.value = 0;
        ui.z.value = 0;
        return document.getElementById('pose_joint_controls').style.display = 'none';
      }
    };
    hook = function(id, events) {
      var element, event, handler;
      if (events == null) {
        events = {};
      }
      element = document.getElementById(id);
      for (event in events) {
        handler = events[event];
        element["on" + event] = handler;
      }
      return element;
    };
    ui = {
      skins: hook('avatar_skin', {
        change: function() {
          return steve.loadSkin(ui.skins.value);
        }
      }),
      rotation: hook('avatar_rotation', {
        change: function() {
          return steve.model.rotation.y = rad(ui.rotation.valueAsNumber);
        }
      }),
      joints: hook('pose_joint', {
        change: updateUI
      }),
      x: hook('pose_joint_x', {
        change: function() {
          var part;
          if (part = parts[ui.joints.value]) {
            return part.rotation.x = rad(ui.x.valueAsNumber);
          }
        }
      }),
      y: hook('pose_joint_y', {
        change: function() {
          var part;
          if (part = parts[ui.joints.value]) {
            return part.rotation.y = rad(ui.y.valueAsNumber);
          }
        }
      }),
      z: hook('pose_joint_z', {
        change: function() {
          var part;
          if (part = parts[ui.joints.value]) {
            return part.rotation.z = rad(ui.z.valueAsNumber);
          }
        }
      })
    };
    parts = {};
    steve.model.traverse(function(part) {
      var name, opt;
      if (name = part.name) {
        parts[name] = part;
        opt = document.createElement('option');
        opt.value = name;
        opt.textContent = name;
        return ui.joints.appendChild(opt);
      }
    });
    hook('pose_joint_reset', {
      click: function() {
        var part;
        if (part = parts[ui.joints.value]) {
          part.rotation.set(0, 0, 0);
        }
        return updateUI();
      }
    });
    hook('pose_reset', {
      click: function() {
        var name, part;
        for (name in parts) {
          part = parts[name];
          part.rotation.set(0, 0, 0);
        }
        return updateUI();
      }
    });
    draggedImageItem = null;
    document.body.ondragover = function(event) {
      event.stopPropagation();
      event.preventDefault();
      return event.dataTransfer.dropEffect = 'copy';
    };
    document.body.ondrop = function(event) {
      var file, reader, _ref;
      event.stopPropagation();
      event.preventDefault();
      file = (_ref = event.dataTransfer.files) != null ? _ref[0] : void 0;
      if ((file != null ? file.type : void 0) !== 'image/png') {
        return;
      }
      reader = new FileReader;
      reader.onload = function(event) {
        var skins, url;
        url = event.target.result;
        skins = ui.skins;
        if (!draggedImageItem) {
          draggedImageItem = document.createElement('option');
          if (skins.childElementCount < 2) {
            skins.appendChild(draggedImageItem);
          } else {
            skins.insertBefore(draggedImageItem, skins.children[1]);
          }
        }
        draggedImageItem.value = url;
        draggedImageItem.textContent = "(dragged image: " + file.name + ")";
        skins.value = url;
        return steve.loadSkin(url);
      };
      return reader.readAsDataURL(file);
    };
    ui.joints.value = '';
    return updateUI();
  };

}).call(this);
